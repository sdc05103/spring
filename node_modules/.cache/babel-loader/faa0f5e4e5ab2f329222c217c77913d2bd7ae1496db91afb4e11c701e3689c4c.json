{"ast":null,"code":"var _jsxFileName = \"/Users/euijung/Desktop/\\u110C\\u1169\\u11AF\\u1111\\u1173/dev/creditpartner/spring/src/components/auth/JoinForm.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n//import { changeField, initializeForm, join } from '../main/modules/auth';\nimport AuthForm from './AuthForm';\n//import { check } from '../main/modules/user'\nimport { useNavigate } from 'react-router-dom';\nimport { join } from './api/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JoinForm = () => {\n  _s();\n  const [error, setError] = useState('');\n  const [userName, setUserName] = useState('');\n  const [userId, setUserId] = useState('');\n  const [password, setPassword] = useState('');\n  const [passwordConfirm, setPasswordConfirm] = useState('');\n  const navigate = useNavigate();\n  const onChange = e => {\n    const {\n      value,\n      name\n    } = e.target;\n    switch (name) {\n      case 'userName':\n        setUserName(value);\n        console.log(userName);\n        break;\n      case 'userId':\n        setUserId(value);\n        console.log(userId);\n        break;\n      case 'password':\n        setPassword(value);\n        console.log(password);\n        break;\n      case 'passwordConfirm':\n        setPasswordConfirm(value);\n        console.log(passwordConfirm);\n        break;\n      default:\n        break;\n    }\n  };\n  const onSubmit = e => {\n    e.preventDefault();\n    if ([userName, userId, password, passwordConfirm].includes('')) {\n      setError('빈 칸을 모두 입력하세요.');\n      return;\n    }\n    if (password !== passwordConfirm) {\n      setError('비밀번호가 일치하지 않습니다.');\n      setPassword('');\n      setPasswordConfirm('');\n      return;\n    }\n    console.log({\n      userName,\n      userId,\n      password,\n      passwordConfirm\n    });\n    setError('');\n    //post\n    const response = join(userName, userId, password);\n    console.log(response);\n    if (response === -1) {\n      setError('이미 존재하는 계정명입니다.');\n    } else {\n      alert('회원가입이 완료되었습니다.');\n      navigate('/');\n    }\n  };\n  useEffect(() => {\n    console.log(error);\n  }, [error]);\n\n  /*\n      useEffect(()=> {\n          if(authError) {\n              console.log('*' + authError);\n              //계정명이 이미 존재할 때\n              if(authError.response.status === 409) {\n                  setError('이미 존재하는 계정명입니다.');\n                  return;\n              }\n              //기타 이유\n              setError('회원가입 실패');\n              return;\n          }\n          if(auth) {\n              console.log('회원가입 성공');\n              console.log(auth);\n              dispatch(check());\n          }\n      }, [auth, authError, dispatch]);\n  \n      \n  \n      useEffect(() => {\n          if(user) {\n              alert('회원가입이 완료 되었습니다!')\n              navigate('/');\n              try {\n                  localStorage.setItem('user', JSON.stringify(user));\n              } catch (e) {\n                  console.log('localStorage is not working');\n              }\n          }\n      }, [navigate, user]);\n      */\n\n  return /*#__PURE__*/_jsxDEV(AuthForm, {\n    type: \"join\",\n    form: {\n      userName,\n      userId,\n      password,\n      passwordConfirm\n    },\n    onChange: onChange,\n    onSubmit: onSubmit,\n    error: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n};\n_s(JoinForm, \"CCpq6hQ3iEmxKZm5oz4Rmvbd2Ys=\", false, function () {\n  return [useNavigate];\n});\n_c = JoinForm;\nexport default JoinForm;\nvar _c;\n$RefreshReg$(_c, \"JoinForm\");","map":{"version":3,"names":["useEffect","useState","useDispatch","useSelector","AuthForm","useNavigate","join","jsxDEV","_jsxDEV","JoinForm","_s","error","setError","userName","setUserName","userId","setUserId","password","setPassword","passwordConfirm","setPasswordConfirm","navigate","onChange","e","value","name","target","console","log","onSubmit","preventDefault","includes","response","alert","type","form","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/euijung/Desktop/졸프/dev/creditpartner/spring/src/components/auth/JoinForm.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n//import { changeField, initializeForm, join } from '../main/modules/auth';\nimport AuthForm from './AuthForm';\n//import { check } from '../main/modules/user'\nimport { useNavigate } from 'react-router-dom';\nimport { join } from './api/auth';\n\n\nconst JoinForm = () => {\n    const [error, setError] = useState('');\n    const [userName, setUserName] = useState('');\n    const [userId, setUserId] = useState('');\n    const [password, setPassword] = useState('');\n    const [passwordConfirm, setPasswordConfirm] = useState('');\n\n    const navigate = useNavigate();\n\n    const onChange = e => {\n        const { value, name } = e.target;\n        switch (name) {\n            case 'userName':\n                setUserName(value);\n                console.log(userName);\n                break;\n            case 'userId':\n                setUserId(value);\n                console.log(userId);\n                break;\n            case 'password':\n                setPassword(value);\n                console.log(password);\n                break;\n            case 'passwordConfirm':\n                setPasswordConfirm(value);\n                console.log(passwordConfirm);\n                break;\n            default:\n                break;\n        }\n\n    };\n\n    const onSubmit = e => {\n        e.preventDefault();\n        if([userName, userId, password, passwordConfirm].includes('')) {\n            setError('빈 칸을 모두 입력하세요.');\n            return;\n        }\n        if(password !== passwordConfirm) {\n            setError('비밀번호가 일치하지 않습니다.');\n            setPassword('');\n            setPasswordConfirm('');\n            return;\n        }\n        console.log({userName, userId, password, passwordConfirm});\n        setError('');\n        //post\n        const response = join(userName, userId, password);\n        console.log(response);\n        \n        if(response===-1) {\n            setError('이미 존재하는 계정명입니다.');\n        }\n        else {\n            alert('회원가입이 완료되었습니다.');\n            navigate('/');\n        }\n        \n    };\n\n    useEffect(() => {\n        console.log(error);\n    },[error])\n\n/*\n    useEffect(()=> {\n        if(authError) {\n            console.log('*' + authError);\n            //계정명이 이미 존재할 때\n            if(authError.response.status === 409) {\n                setError('이미 존재하는 계정명입니다.');\n                return;\n            }\n            //기타 이유\n            setError('회원가입 실패');\n            return;\n        }\n        if(auth) {\n            console.log('회원가입 성공');\n            console.log(auth);\n            dispatch(check());\n        }\n    }, [auth, authError, dispatch]);\n\n    \n\n    useEffect(() => {\n        if(user) {\n            alert('회원가입이 완료 되었습니다!')\n            navigate('/');\n            try {\n                localStorage.setItem('user', JSON.stringify(user));\n            } catch (e) {\n                console.log('localStorage is not working');\n            }\n        }\n    }, [navigate, user]);\n    */\n\n    return (\n        <AuthForm \n        type=\"join\"\n        form={{userName, userId, password, passwordConfirm}}\n        onChange={onChange}\n        onSubmit={onSubmit}\n        error={error} />\n    );\n};\n\nexport default JoinForm;"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD;AACA,OAAOC,QAAQ,MAAM,YAAY;AACjC;AACA,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,IAAI,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGlC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACc,MAAM,EAAEC,SAAS,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACkB,eAAe,EAAEC,kBAAkB,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAE1D,MAAMoB,QAAQ,GAAGhB,WAAW,CAAC,CAAC;EAE9B,MAAMiB,QAAQ,GAAGC,CAAC,IAAI;IAClB,MAAM;MAAEC,KAAK;MAAEC;IAAK,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChC,QAAQD,IAAI;MACR,KAAK,UAAU;QACXX,WAAW,CAACU,KAAK,CAAC;QAClBG,OAAO,CAACC,GAAG,CAACf,QAAQ,CAAC;QACrB;MACJ,KAAK,QAAQ;QACTG,SAAS,CAACQ,KAAK,CAAC;QAChBG,OAAO,CAACC,GAAG,CAACb,MAAM,CAAC;QACnB;MACJ,KAAK,UAAU;QACXG,WAAW,CAACM,KAAK,CAAC;QAClBG,OAAO,CAACC,GAAG,CAACX,QAAQ,CAAC;QACrB;MACJ,KAAK,iBAAiB;QAClBG,kBAAkB,CAACI,KAAK,CAAC;QACzBG,OAAO,CAACC,GAAG,CAACT,eAAe,CAAC;QAC5B;MACJ;QACI;IACR;EAEJ,CAAC;EAED,MAAMU,QAAQ,GAAGN,CAAC,IAAI;IAClBA,CAAC,CAACO,cAAc,CAAC,CAAC;IAClB,IAAG,CAACjB,QAAQ,EAAEE,MAAM,EAAEE,QAAQ,EAAEE,eAAe,CAAC,CAACY,QAAQ,CAAC,EAAE,CAAC,EAAE;MAC3DnB,QAAQ,CAAC,gBAAgB,CAAC;MAC1B;IACJ;IACA,IAAGK,QAAQ,KAAKE,eAAe,EAAE;MAC7BP,QAAQ,CAAC,kBAAkB,CAAC;MAC5BM,WAAW,CAAC,EAAE,CAAC;MACfE,kBAAkB,CAAC,EAAE,CAAC;MACtB;IACJ;IACAO,OAAO,CAACC,GAAG,CAAC;MAACf,QAAQ;MAAEE,MAAM;MAAEE,QAAQ;MAAEE;IAAe,CAAC,CAAC;IAC1DP,QAAQ,CAAC,EAAE,CAAC;IACZ;IACA,MAAMoB,QAAQ,GAAG1B,IAAI,CAACO,QAAQ,EAAEE,MAAM,EAAEE,QAAQ,CAAC;IACjDU,OAAO,CAACC,GAAG,CAACI,QAAQ,CAAC;IAErB,IAAGA,QAAQ,KAAG,CAAC,CAAC,EAAE;MACdpB,QAAQ,CAAC,iBAAiB,CAAC;IAC/B,CAAC,MACI;MACDqB,KAAK,CAAC,gBAAgB,CAAC;MACvBZ,QAAQ,CAAC,GAAG,CAAC;IACjB;EAEJ,CAAC;EAEDrB,SAAS,CAAC,MAAM;IACZ2B,OAAO,CAACC,GAAG,CAACjB,KAAK,CAAC;EACtB,CAAC,EAAC,CAACA,KAAK,CAAC,CAAC;;EAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI,oBACIH,OAAA,CAACJ,QAAQ;IACT8B,IAAI,EAAC,MAAM;IACXC,IAAI,EAAE;MAACtB,QAAQ;MAAEE,MAAM;MAAEE,QAAQ;MAAEE;IAAe,CAAE;IACpDG,QAAQ,EAAEA,QAAS;IACnBO,QAAQ,EAAEA,QAAS;IACnBlB,KAAK,EAAEA;EAAM;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAExB,CAAC;AAAC7B,EAAA,CA7GID,QAAQ;EAAA,QAOOJ,WAAW;AAAA;AAAAmC,EAAA,GAP1B/B,QAAQ;AA+Gd,eAAeA,QAAQ;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}